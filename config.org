* General
#+BEGIN_SRC emacs-lisp
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize))
#+END_SRC

* Package
#+BEGIN_SRC emacs-lisp
  (add-to-list
   'package-archives
   '("melpa" . "http://melpa.org/packages/")
   t)
  (setq package-archive-priorities
        '(("gnu"          . 1)
          ("melpa"        . 0)))
#+END_SRC

* Major Mode
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.tpl\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.xml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.jinja2\\'" . web-mode))

  (when (< emacs-major-version 27)
    (add-to-list 'auto-mode-alist '("\\.js\\'" . rjsx-mode))
    (add-to-list 'auto-mode-alist '("\\.jsx\\'" . rjsx-mode)))
#+END_SRC

* Global Minor Modes
#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
  (global-subword-mode 1)
  (global-hl-line-mode 1)
  (global-whitespace-mode 1)
  (column-number-mode 1)
  (ido-mode 1)
  (electric-indent-mode 0)
  (global-auto-revert-mode 1)
  (desktop-save-mode 1)
  ;; From packages
  (flx-ido-mode 1)
  (global-git-gutter-mode 1)
  (eyebrowse-mode 1)
  (evil-mode 1)
  (auto-compile-on-load-mode 1)
  (auto-compile-on-save-mode 1)
#+END_SRC

* Minor Mode Hooks
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'hs-minor-mode)
  (add-hook 'prog-mode-hook
            (if (>= emacs-major-version 26)
                'display-line-numbers-mode
              'linum-mode))
  (add-hook 'prog-mode-hook 'display-fill-column-indicator-mode)
  (add-hook 'prog-mode-hook
            (lambda ()
              (setq display-fill-column-indicator-column 120)))

  ;; From packages
  (add-hook 'after-init-hook 'global-emojify-mode)
  (add-hook 'after-init-hook 'global-flycheck-mode)
  (add-hook 'after-init-hook 'global-company-mode)
  (with-eval-after-load 'company
    (company-flx-mode +1))
#+END_SRC

* Set Variables
#+BEGIN_SRC emacs-lisp
  (setq-default custom-file (expand-file-name "emacs-custom.el" user-emacs-directory))
  (setq-default create-lockfiles nil)
  (setq-default confirm-kill-emacs 'yes-or-no-p)
  (setq-default bidi-display-reordering nil) ;; Improve performance when navigating long lines
  (setq-default indent-tabs-mode nil)
  (setq-default show-paren-delay 0)
  (setq-default uniquify-buffer-name-style 'forward)
  (setq-default org-src-fontify-natively t)
  (setq-default whitespace-style '(face trailing tabs))
  (setq-default ido-auto-merge-work-directories-length nil)
  (setq-default native-comp-deferred-compilation t)
  (put 'upcase-region 'disabled nil)
  (put 'downcase-region 'disabled nil)

  ;; From packages
  (setq-default evil-default-state 'emacs)
  (setq-default emojify-emoji-styles '(unicode))
  (setq-default symbol-overlay-map nil)
  (setq-default neo-smart-open t)
  (setq-default load-prefer-newer t)
#+END_SRC

* Variable Hooks
#+BEGIN_SRC emacs-lisp
  (add-hook 'web-mode-hook
            (lambda ()
              (setq web-mode-markup-indent-offset 2)
              (setq web-mode-css-indent-offset 2)
              (setq web-mode-code-indent-offset 2)))
  (add-hook 'js-mode-hook
            (lambda ()
              (setq js-indent-level 2)))
  (add-hook 'js2-mode-hook
            (lambda ()
              (setq js2-basic-offset 2)))
  (add-hook 'css-mode-hook
            (lambda ()
              (setq css-indent-offset 2)))
  (add-hook 'scss-mode-hook
            (lambda ()
              (setq css-indent-offset 2)))
  (add-hook 'pug-mode-hook
            (lambda ()
              (setq pug-tab-width 2)
              (setq indent-tabs-mode t)))
#+END_SRC

* Keys
#+BEGIN_SRC emacs-lisp
  ;; built-in
  (global-set-key (kbd "C-x _") 'fit-window-to-buffer)

  ;; EasyPG Assistant
  (global-set-key (kbd "C-x x") 'epa-decrypt-region)

  ;; neotree
  (global-set-key [f8] 'neotree-toggle)

  ;; symbol-overlay
  (global-set-key (kbd "C-;") 'symbol-overlay-put)
  (global-set-key (kbd "C->") 'symbol-overlay-jump-next)
  (global-set-key (kbd "C-<") 'symbol-overlay-jump-prev)
  (global-set-key [(meta f3)] 'symbol-overlay-query-replace)

  ;; windmove key bindings
  (global-set-key (kbd "C-S-b")  'windmove-left)
  (global-set-key (kbd "C-S-f") 'windmove-right)
  (global-set-key (kbd "C-S-p")    'windmove-up)
  (global-set-key (kbd "C-S-n")  'windmove-down)

  ;; avy
  (global-set-key (kbd "C-:") 'avy-goto-char)

  ;; magit
  (global-set-key (kbd "C-x g") 'magit-status)

  ;; defun-indent
  (global-set-key (kbd "<C-tab>")  'force-indent)
  (global-set-key (kbd "<C-S-tab>")  'force-unindent)
  (global-set-key (kbd "<C-iso-lefttab>")  'force-unindent)

  ;; defun-delete
  (global-set-key (kbd "C-S-k")  'delete-line)
  (global-set-key (kbd "C-S-w")  'delete-region)
  (global-set-key (kbd "M-D")  'delete-word)
  (global-set-key (kbd "<M-S-backspace>")  'backward-delete-word)

  ;; defun-modifier
  (global-set-key (kbd "C-c g c") 'hihi-control)
  (global-set-key (kbd "C-c g m") 'hihi-meta)
  (global-set-key (kbd "C-c g d") 'hihi-control-shift)
  (global-set-key (kbd "C-c g S") 'hihi-control-shift)
  (global-set-key (kbd "C-c g j") 'hihi-meta-shift)
  (global-set-key (kbd "C-c g M") 'hihi-meta-shift)
  (global-set-key (kbd "C-c g x") 'hihi-control-meta)
  (global-set-key (kbd "C-'") 'hihi-control-meta)
#+END_SRC

* Backup
#+BEGIN_SRC emacs-lisp
  (setq backup-directory (concat user-emacs-directory "backup/"))

  (setq backup-directory-alist
        `((".*" . ,backup-directory)))
  (setq auto-save-file-name-transforms
        `((".*" ,backup-directory t)))

  (message "Deleting old backup files...")
  (let ((month (* 60 60 24 30))
        (current (float-time (current-time))))
    (dolist (file (directory-files backup-directory t))
      (when (and (backup-file-name-p file)
                 (> (- current (float-time (cl-fifth (file-attributes file))))
                    month))
        (message "%s" file)
        (delete-file file))))
#+END_SRC

* User Interface
#+BEGIN_SRC emacs-lisp
  (defun init-theme (frame)
    (mapc #'disable-theme custom-enabled-themes)
    (if (display-graphic-p frame)
        (progn
          (load-theme 'gruvbox-dark-medium)
          (set-face-background 'hl-line "#1d2021"))
      (load-theme 'tsdh-dark))
    (set-face-attribute 'whitespace-tab nil :background "SkyBlue4")
    (set-face-attribute 'whitespace-trailing nil :background "Coral3")
    ;; Disable symbol-overlay's temporary hightlight by setting it to background color
    ;; (set-face-attribute 'symbol-overlay-temp-face nil :background (face-attribute 'default :background))
    )

  (add-hook 'after-init-hook
            (lambda ()
              (mapc 'init-theme (frame-list))))
  ;; Handle start from daemon
  (add-hook 'after-make-frame-functions 'init-theme)

  (tool-bar-mode -1)
  (menu-bar-mode -1)

  (add-hook 'window-setup-hook
            '(lambda()
               (setq symbol-overlay-colors
                     '("#ff0000" "#00ff00" "#0000ff"
                       "#ffff00" "#ff00ff" "#00ffff"
                       "#ff8000" "#ff0080" "#0080ff"))))
#+END_SRC

* web-mode
#+BEGIN_SRC emacs-lisp
  (setq web-mode-enable-current-element-highlight t)
  (setq web-mode-enable-auto-indentation nil)
  (setq web-mode-enable-engine-detection t)
  (setq web-mode-engines-alist '(("django" . "\\.jinja2\\'")))
  (setq web-mode-markup-indent-offset 2)
#+END_SRC

* paredit
#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook 'enable-paredit-mode)
  (add-hook 'eval-expression-minibuffer-setup-hook 'enable-paredit-mode)
  (add-hook 'ielm-mode-hook 'enable-paredit-mode)
  (add-hook 'lisp-mode-hook 'enable-paredit-mode)
  (add-hook 'lisp-interaction-mode-hook 'enable-paredit-mode)
  (add-hook 'scheme-mode-hook 'enable-paredit-mode)
  (add-hook 'emacs-lisp-mode-hook #'enable-paredit-mode)
#+END_SRC

* magit
#+BEGIN_SRC emacs-lisp
  (require 'magit)
  (magit-define-popup-switch 'magit-commit-popup ?E
                             "Allow empty message" "--allow-empty-message")
  (setq magit-completing-read-function 'magit-ido-completing-read)
#+END_SRC

* projectile
#+BEGIN_SRC emacs-lisp
  (projectile-global-mode 1)

  (setq projectile-globally-ignored-directories
        (cons "node_modules" projectile-globally-ignored-directories))

  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
#+END_SRC

* lsp-mode
#+BEGIN_SRC emacs-lisp
  (require 'lsp-ui)
  ;; Tuning
  (setq gc-cons-threshold 100000000)
  (setq read-process-output-max 1048576)

  (custom-set-variables
   '(lsp-auto-guess-root nil)
   '(lsp-ui-sideline-enable nil)
   '(lsp-ui-imenu-enable t)
   '(lsp-ui-peek-always-show t)
   '(lsp-ui-doc-enable nil))

  ;; npm i -g typescript-language-server
  ;; pip install python-lsp-server
  ;; npm i -g vscode-css-languageserver-bin
  ;; npm i -g vscode-html-languageserver-bin

  (add-hook 'js-mode-hook #'lsp)
  (add-hook 'js2-mode-hook #'lsp)
  (add-hook 'rjsx-mode-hook #'lsp)
  (add-hook 'python-mode-hook #'lsp)
  (add-hook 'web-mode-hook #'lsp)
  (add-hook 'css-mode-hook #'lsp)
  (add-hook 'java-mode-hook #'lsp)


  ;; Define key bindings
  (let ((map (make-sparse-keymap)))
    (define-key map (kbd "C-c l .") #'lsp-find-definition)
    (define-key map (kbd "C-c l /") #'lsp-find-references)
    (define-key map (kbd "C-c l d") #'lsp-ui-doc-glance)
    (define-key map (kbd "C-c l i") #'lsp-ui-peek-find-implementation)
    (define-key map (kbd "C-c l I") #'lsp-find-implementation)
    (push
     `(lsp-mode . ,map)
     minor-mode-map-alist))
  (define-key lsp-ui-mode-map [remap js-find-symbol] #'lsp-ui-peek-find-definitions)
  (define-key lsp-ui-mode-map [remap xref-find-definitions] #'lsp-ui-peek-find-definitions)
  (define-key lsp-ui-mode-map [remap xref-find-references] #'lsp-ui-peek-find-references)
#+END_SRC
