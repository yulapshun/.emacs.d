* General
#+BEGIN_SRC emacs-lisp
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize))
  (setq gc-cons-threshold 100000000)
  (setq read-process-output-max 1048576)
#+END_SRC

* Package
#+BEGIN_SRC emacs-lisp
  (add-to-list 'package-archives
               '("melpa" . "https://melpa.org/packages/") t)
  (setq package-archive-priorities
        '(("gnu" . 0)
          ("melpa" . 1)))
#+END_SRC

* Minor Modes
#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
  (global-subword-mode 1)
  (global-hl-line-mode 1)
  (global-whitespace-mode 1)
  (column-number-mode 1)
  (ido-mode 1)
  (ido-everywhere 1)
  (global-auto-revert-mode 1)
  (desktop-save-mode 1)
  (electric-indent-mode 0)
  (add-hook 'prog-mode-hook 'hs-minor-mode)
  (add-hook 'prog-mode-hook
            (if (>= emacs-major-version 26)
                'display-line-numbers-mode
              'linum-mode))
  (add-hook 'prog-mode-hook 'display-fill-column-indicator-mode)
  (add-hook 'prog-mode-hook
            (lambda ()
              (setq display-fill-column-indicator-column 120)))
#+END_SRC

* Variables
#+BEGIN_SRC emacs-lisp
  (setq-default custom-file (expand-file-name "custom.el" user-emacs-directory))
  (setq-default create-lockfiles nil)
  (setq-default confirm-kill-emacs 'yes-or-no-p)
  (setq-default bidi-display-reordering nil) ;; Improve performance when navigating long lines
  (setq-default indent-tabs-mode nil)
  (setq-default show-paren-delay 0)
  (setq-default uniquify-buffer-name-style 'forward)
  (setq-default org-src-fontify-natively t)
  (setq-default whitespace-style '(face trailing tabs))
  (setq-default ido-auto-merge-work-directories-length nil)
  (setq-default native-comp-deferred-compilation t)
  (put 'upcase-region 'disabled nil)
  (put 'downcase-region 'disabled nil)
  (add-hook 'js-mode-hook
            (lambda ()
              (setq js-indent-level 2)))
  (add-hook 'css-mode-hook
            (lambda ()
              (setq css-indent-offset 2)))
#+END_SRC

* Keys
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x _") 'fit-window-to-buffer)
  (global-set-key (kbd "C-x x") 'epa-decrypt-region)
  (global-set-key (kbd "C-S-b")  'windmove-left)
  (global-set-key (kbd "C-S-f") 'windmove-right)
  (global-set-key (kbd "C-S-p")    'windmove-up)
  (global-set-key (kbd "C-S-n")  'windmove-down)

  ;; defun-indent
  (global-set-key (kbd "<C-tab>")  'force-indent)
  (global-set-key (kbd "<C-S-tab>")  'force-unindent)
  (global-set-key (kbd "<C-iso-lefttab>")  'force-unindent)

  ;; defun-delete
  (global-set-key (kbd "C-S-k")  'delete-line)
  (global-set-key (kbd "C-S-w")  'delete-region)
  (global-set-key (kbd "M-D")  'delete-word)
  (global-set-key (kbd "<M-S-backspace>")  'backward-delete-word)

  ;; defun-modifier
  (global-set-key (kbd "C-c g c") 'hihi-control)
  (global-set-key (kbd "C-c g m") 'hihi-meta)
  (global-set-key (kbd "C-c g d") 'hihi-control-shift)
  (global-set-key (kbd "C-c g S") 'hihi-control-shift)
  (global-set-key (kbd "C-c g j") 'hihi-meta-shift)
  (global-set-key (kbd "C-c g M") 'hihi-meta-shift)
  (global-set-key (kbd "C-c g x") 'hihi-control-meta)
  (global-set-key (kbd "C-'") 'hihi-control-meta)
#+END_SRC

* Backup
#+BEGIN_SRC emacs-lisp
  (setq backup-directory (concat user-emacs-directory "backup/"))

  (setq backup-directory-alist
        `((".*" . ,backup-directory)))
  (setq auto-save-file-name-transforms
        `((".*" ,backup-directory t)))

  (message "Deleting old backup files...")
  (let ((month (* 60 60 24 30))
        (current (float-time (current-time))))
    (dolist (file (directory-files backup-directory t))
      (when (and (backup-file-name-p file)
                 (> (- current (float-time (cl-fifth (file-attributes file))))
                    month))
        (message "%s" file)
        (delete-file file))))
#+END_SRC

* User Interface
#+BEGIN_SRC emacs-lisp
  (defun init-theme (frame)
    (mapc #'disable-theme custom-enabled-themes)
    (if (display-graphic-p frame)
        (progn
          (load-theme 'gruvbox-dark-medium)
          (set-face-background 'hl-line "#1d2021"))
      (load-theme 'tsdh-dark))
    (set-face-attribute 'whitespace-tab nil :background "SkyBlue4")
    (set-face-attribute 'whitespace-trailing nil :background "Coral3")
    ;; Disable symbol-overlay's temporary hightlight by setting it to background color
    ;; (set-face-attribute 'symbol-overlay-temp-face nil :background (face-attribute 'default :background))
    )

  (add-hook 'after-init-hook
            (lambda ()
              (mapc 'init-theme (frame-list))))
  ;; Handle start from daemon
  (add-hook 'after-make-frame-functions 'init-theme)

  (tool-bar-mode -1)
  (menu-bar-mode -1)

  (add-hook 'window-setup-hook
            '(lambda()
               (setq symbol-overlay-colors
                     '("#ff0000" "#00ff00" "#0000ff"
                       "#ffff00" "#ff00ff" "#00ffff"
                       "#ff8000" "#ff0080" "#0080ff"))))
#+END_SRC

* org
#+BEGIN_SRC emacs-lisp
  (setq-default org-startup-indented t)
  (setq-default org-pretty-entities t)
  (setq-default org-hide-emphasis-markers t)
  (setq-default org-startup-with-inline-images t)
  (setq-default org-image-actual-width '(300))

  (let ((headline `(:inherit default :weight bold)))
    (custom-theme-set-faces
     'user
     `(org-level-8 ((t (,@headline))))
     `(org-level-7 ((t (,@headline))))
     `(org-level-6 ((t (,@headline))))
     `(org-level-5 ((t (,@headline))))
     `(org-level-4 ((t (,@headline))))
     `(org-level-3 ((t (,@headline :height 1.1))))
     `(org-level-2 ((t (,@headline :height 1.2))))
     `(org-level-1 ((t (,@headline :height 1.3))))
     `(org-document-title ((t (,@headline :height 1.5 :underline nil))))))
#+END_SRC

* all-the-icons
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :ensure t
    :if (display-graphic-p))
#+END_SRC

* all-the-icons-dired
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons-dired
    :ensure t
    :after (all-the-icons)
    :hook (dired-mode . all-the-icons-dired-mode))
#+END_SRC

* auto-compile
#+BEGIN_SRC emacs-lisp
  (use-package auto-compile
    :ensure t
    :config
    (auto-compile-on-load-mode 1)
    (auto-compile-on-save-mode 1)
    (setq-default load-prefer-newer t))
#+END_SRC

* avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("C-:" . 'avy-goto-char))
#+END_SRC

* company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :init
    (add-hook 'after-init-hook 'global-company-mode)
    :config
    (setq-default company-dabbrev-downcase nil)
    :bind (("C-." . 'company-complete)
           (:map company-active-map
                 ("<tab>" . 'company-complete-common-or-cycle)
                 ("C-p" . nil)
                 ("C-n" . nil)
                 ("M-p" . 'company-select-previous)
                 ("M-n" . 'company-select-next)
                 ("C-h" . 'company-show-doc-buffer))
           (:map company-search-map
                 ("<tab>" . 'company-complete-common-or-cycle)
                 ("C-p" . nil)
                 ("C-n" . nil)
                 ("M-p" . 'company-select-previous)
                 ("M-n" . 'company-select-next)
                 ("C-h" . 'company-show-doc-buffer)))
    :custom
    (company-idle-delay 1))
#+END_SRC

* company-box
#+BEGIN_SRC emacs-lisp
  (use-package company-box
    :hook (company-mode . company-box-mode)
    :after (company))
#+END_SRC

* company-flx
#+BEGIN_SRC emacs-lisp
  (use-package company-flx
    :ensure t
    :config
    (company-flx-mode 0)
    :after (company))
#+END_SRC

* company-web
#+BEGIN_SRC emacs-lisp
  (use-package company-web
    :ensure t
    :after (company))
#+END_SRC

* dockerfile-mode
#+BEGIN_SRC emacs-lisp
  (use-package dockerfile-mode
    :ensure t)
#+END_SRC

* emojify
#+BEGIN_SRC emacs-lisp
  (use-package emojify
    :ensure t
    :init
    (add-hook 'after-init-hook 'global-emojify-mode)
    :config
    (setq-default emojify-emoji-styles '(unicode)))
#+END_SRC

* exec-path-from-shell
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :ensure t)
#+END_SRC

* eyebrowse
#+BEGIN_SRC emacs-lisp
  (use-package eyebrowse
    :ensure t
    :config
    (eyebrowse-mode 1))
#+END_SRC

* flx-ido
#+BEGIN_SRC emacs-lisp
  (use-package flx-ido
    :ensure t
    :config
    (flx-ido-mode 1))
#+END_SRC

* flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init
    (add-hook 'after-init-hook 'global-flycheck-mode))
#+END_SRC

* geiser
#+BEGIN_SRC emacs-lisp
  (use-package geiser
    :ensure t)
#+END_SRC

* git-gutter
#+BEGIN_SRC emacs-lisp
  (use-package git-gutter
    :ensure t
    :config
    (global-git-gutter-mode 1))
#+END_SRC

* go-mode
#+BEGIN_SRC emacs-lisp
  (use-package go-mode
    :ensure t)
#+END_SRC

* ido-completing-read+
#+BEGIN_SRC emacs-lisp
  (use-package ido-completing-read+
    :ensure t
    :config
    (ido-ubiquitous-mode 1))
#+END_SRC

* ido-vertical-mode
#+BEGIN_SRC emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :config
    (ido-vertical-mode 1)
    (setq-default ido-vertical-show-count t))
#+END_SRC

* js2-mode
#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :ensure t
    :config
    (setq js2-basic-offset 2))
#+END_SRC

* lsp-java
#+BEGIN_SRC emacs-lisp
  (use-package lsp-java
    :ensure t)
#+END_SRC

* lsp-mode
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :ensure t
    :config
    (require 'lsp-ui)
    (let ((map (make-sparse-keymap)))
      (define-key map (kbd "C-c l .") #'lsp-find-definition)
      (define-key map (kbd "C-c l /") #'lsp-find-references)
      (define-key map (kbd "C-c l d") #'lsp-ui-doc-glance)
      (define-key map (kbd "C-c l i") #'lsp-ui-peek-find-implementation)
      (define-key map (kbd "C-c l I") #'lsp-find-implementation)
      (push
       `(lsp-mode . ,map)
       minor-mode-map-alist))
    (define-key lsp-ui-mode-map [remap js-find-symbol] #'lsp-ui-peek-find-definitions)
    (define-key lsp-ui-mode-map [remap xref-find-definitions] #'lsp-ui-peek-find-definitions)
    (define-key lsp-ui-mode-map [remap xref-find-references] #'lsp-ui-peek-find-references)
    :custom
    (lsp-auto-guess-root nil)
    (lsp-ui-sideline-enable nil)
    (lsp-ui-imenu-enable t)
    (lsp-ui-peek-always-show t)
    (lsp-ui-doc-enable nil)
    :hook
    ((js-mode . lsp) (js2-mode . lsp) (rjsx-mode . lsp) (python-mode . lsp) (web-mode . lsp) (css-mode . lsp)
     (java-mode . lsp) (sh-mode . lsp) (html-mode . lsp)))
  ;; pip install python-lsp-server
  ;; npm i -g typescript-language-server
  ;; npm install -g vscode-langservers-extracted
  ;; npm i -g bash-language-server

#+END_SRC

* magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :config
    (magit-define-popup-switch 'magit-commit-popup ?E
      "Allow empty message" "--allow-empty-message")
    (setq-default magit-completing-read-function 'magit-ido-completing-read)
    :bind
    ("C-x g" . 'magit-status))
#+END_SRC

* neotree
#+BEGIN_SRC emacs-lisp
  (use-package neotree
    :ensure t
    :config
    (setq-default neo-smart-open t)
    :bind
    ([f8] . 'neotree-toggle))
#+END_SRC

* org-superstar
#+BEGIN_SRC emacs-lisp
  (use-package org-superstar
    :ensure t
    :custom
    (org-superstar-remove-leading-stars t)
    :hook ((org-mode . org-superstar-mode)))
#+END_SRC

* paredit
#+BEGIN_SRC emacs-lisp
  (use-package paredit
    :ensure t
    :config
    (add-hook 'emacs-lisp-mode-hook 'enable-paredit-mode)
    (add-hook 'eval-expression-minibuffer-setup-hook 'enable-paredit-mode)
    (add-hook 'ielm-mode-hook 'enable-paredit-mode)
    (add-hook 'lisp-mode-hook 'enable-paredit-mode)
    (add-hook 'lisp-interaction-mode-hook 'enable-paredit-mode)
    (add-hook 'scheme-mode-hook 'enable-paredit-mode)
    (add-hook 'emacs-lisp-mode-hook #'enable-paredit-mode))

#+END_SRC

* projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (projectile-global-mode 1)
    (setq projectile-globally-ignored-directories
          (cons "node_modules" projectile-globally-ignored-directories))
    :bind
    ("C-c p" . 'projectile-command-map))
#+END_SRC

* php-mode
#+BEGIN_SRC emacs-lisp
  (use-package php-mode
    :ensure t)
#+END_SRC

* pug-mode
#+BEGIN_SRC emacs-lisp
  (use-package pug-mode
    :ensure t
    :config
    (setq pug-tab-width 2)
    (setq indent-tabs-mode t))
#+END_SRC

* rjsx-mode
#+BEGIN_SRC emacs-lisp
  (use-package rjsx-mode
    :ensure t
    :config
    (when (< emacs-major-version 27)
      (add-to-list 'auto-mode-alist '("\\.js\\'" . rjsx-mode))
      (add-to-list 'auto-mode-alist '("\\.jsx\\'" . rjsx-mode))))
#+END_SRC

* symbol-overlay
#+BEGIN_SRC emacs-lisp
  (use-package symbol-overlay
    :ensure t
    :config
    (setq-default symbol-overlay-map nil)
    :bind
    (("C-;" . 'symbol-overlay-put)
     ("C->" . 'symbol-overlay-jump-next)
     ("C-<" . 'symbol-overlay-jump-prev)
     ([(meta f3)] . 'symbol-overlay-query-replace)))
#+END_SRC

* vundo
#+BEGIN_SRC emacs-lisp
  (use-package vundo
    :bind
    ("C-_" . 'vundo)
    :ensure t)
#+END_SRC

* web-mode
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t
    :config
    (setq-default web-mode-enable-current-element-highlight t)
    (setq-default web-mode-enable-auto-indentation nil)
    (setq-default web-mode-enable-engine-detection t)
    (setq-default web-mode-markup-indent-offset 2)
    (setq-default web-mode-markup-indent-offset 2)
    (setq-default web-mode-css-indent-offset 2)
    (setq-default web-mode-code-indent-offset 2)
    (setq-default web-mode-engines-alist '(("django" . "\\.jinja2\\'")))
    :mode
    ("\\.phtml\\'" "\\.tpl\\'"  "\\.[agj]sp\\'"  "\\.as[cp]x\\'"  "\\.erb\\'"  "\\.mustache\\'"  "\\.djhtml\\'"
    "\\.html?\\'"  "\\.xml\\'" "\\.jinja2\\'" ))
#+END_SRC

* yaml-mode
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :ensure t)
#+END_SRC

* yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :hook ((emacs-lisp-mode . yas-minor-mode) (js-mode . yas-minor-mode) (python-mode . yas-minor-mode))
    :bind (:map yas-minor-mode-map
                ("C-i" . nil) ;; Only <tab> should expand, C-i should not
                ("C-," . 'yas-expand)))
#+END_SRC

* yasnippet-snippets
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet-snippets
    :ensure t)
#+END_SRC
